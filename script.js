// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏

const TELEGRAM_TOKEN = "8060002374:AAGZ1B6fQutNTMMS22wOkgCH_defGVS8KVE";
const TELEGRAM_CHAT_ID = "-4885330608";

// --- –°–æ—Å—Ç–æ—è–Ω–∏—è
let cart = [];
let favorites = [];

// === üë§ –ê–ö–ö–ê–£–ù–¢–´ ===
let users = JSON.parse(localStorage.getItem("users") || "[]");
let currentUser = JSON.parse(localStorage.getItem("currentUser") || "null");

// === –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
document.addEventListener("DOMContentLoaded", () => {
  const savedUser = localStorage.getItem("currentUser");
  if (savedUser) {
    currentUser = JSON.parse(savedUser);
  }
  renderAccount(); // –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
});


let currentPage = 1;
const perPage = 6;
let sortMode = "default";

let query = "";

let activeCategory = "all";

// --- –î–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
let products = [
  {
  "name": "AirPods Pro 2 (LUX)",
  "category": "airpods",
  "price": 600,
  "img": "img/airpods-pro2-lux.png.png",
  "specs": [
    "–ê–∫—Ç–∏–≤–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (ANC)",
    "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ä–µ–∂–∏–º",
    "Bluetooth 5.3",
    "–î–æ 6 —á–∞—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
    "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∫–µ–π—Å"
  ],
  "memory": [
    { "size": "–ë–∞–∑–æ–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", "price": 600 }
  ],
  "colors": [
    { "name": "–ë–µ–ª—ã–π", "color": "#ffffff", "img": "img/airpods-pro2-lux.png.png" },
  ]
},
{
  "name": "AirPods Pro 2 (Premium)",
  "category": "airpods",
  "price": 700,
  "img": "img/airpods-pro2-lux.png.png",
  "specs": [
    "–ê–∫—Ç–∏–≤–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (ANC)",
    "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫",
    "–ö–µ–π—Å —Å –¥–∏–Ω–∞–º–∏–∫–æ–º –∏ –∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Find My",
    "–î–æ 6 —á–∞—Å–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"
  ],
  "memory": [
    { "size": "–ë–∞–∑–æ–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", "price": 700 }
  ],
  "colors": [
    { "name": "–ë–µ–ª—ã–π", "color": "#ffffff", "img": "img/airpods-pro2-lux.png.png" },
  ]
},
{
  "name": "AirPods 3",
  "category": "airpods",
  "price": 650,
  "img": "img/airpods-pro3.png.png",
  "specs": [
    "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥—Ä–∞–π–≤–µ—Ä Apple",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞",
    "–î–æ 6 —á–∞—Å–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è",
    "–í–ª–∞–≥–æ–∑–∞—â–∏—Ç–∞ IPX4",
    "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∫–µ–π—Å MagSafe"
  ],
  "memory": [
    { "size": "–ë–∞–∑–æ–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", "price": 650 }
  ],
  "colors": [
    { "name": "–ë–µ–ª—ã–π", "color": "#ffffff", "img": "img/airpods-pro3.png.png" }
  ]
}
];



// --- –£—Ç–∏–ª–∏—Ç—ã
const fmt = n => n.toLocaleString("ru-RU") ;

const $ = id => document.getElementById(id);

// --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
function getFiltered() {
  let list = products.slice();

  // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (activeCategory !== "all") {
    list = list.filter(p => p.category === activeCategory);
  }

  // —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
  if (query) {
    list = list.filter(p => p.name.toLowerCase().includes(query));
  }

  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  if (sortMode === "priceAsc") list.sort((a, b) => a.price - b.price);
  if (sortMode === "priceDesc") list.sort((a, b) => b.price - a.price);
  if (sortMode === "name") list.sort((a, b) => a.name.localeCompare(b.name, "ru"));

  return list;
}

// --- –†–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
function render() {
  const list = $("productList");

  list.classList.add("page-exit");
  setTimeout(() => {
    list.classList.remove("page-exit");
    list.innerHTML = "";

    const items = getFiltered();
    const totalPages = Math.max(1, Math.ceil(items.length / perPage));
    if (currentPage > totalPages) currentPage = totalPages;

    const start = (currentPage - 1) * perPage;
    const pageItems = items.slice(start, start + perPage);

    pageItems.forEach(p => {
      const idx = products.indexOf(p);
      const card = document.createElement("div");
      card.className = "card";
      const favActive = favorites.find(f => f.name === p.name) ? "active" : "";
card.innerHTML = `
  <img src="${p.img}" alt="${p.name}" onclick="openProduct(${idx})">
  <h3>${p.name}</h3>
  <p class="price">${fmt(p.price)} MDL</p>
  <div style="display:flex;justify-content:center;gap:10px;">
    <button class="btn btn-primary" onclick="addToCart(${idx})">üß∫ –í –∫–æ—Ä–∑–∏–Ω—É</button>
    <button class="btn-fav ${favActive}" onclick="addToFavorites(${idx})">‚≠ê</button>
  </div>
`;

      list.appendChild(card);
    });

    list.classList.add("page-enter");
    requestAnimationFrame(() => {
      list.classList.add("page-enter-active");
      list.classList.remove("page-enter");
      setTimeout(() => list.classList.remove("page-enter-active"), 500);
    });

    renderPagination(totalPages);
  }, 200);
}

// === –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ===
function toggleFavorites() {
  const overlay = document.getElementById("favOverlay");
  overlay.style.display = overlay.style.display === "flex" ? "none" : "flex";
  renderFavorites();
}

function addToFavorites(i) {
  const p = products[i];
  const existing = favorites.find(f => f.name === p.name);

  if (!existing) {
    favorites.push(p);
    showToast("üíö –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", "success");
  } else {
    favorites = favorites.filter(f => f.name !== p.name);
    showToast("üíî –£–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "info");
  }

  document.getElementById("favCount").textContent = favorites.length;
  render(); // üî• –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–º–µ–Ω—è–ª—Å—è
  saveState();
}


function renderFavorites() {
  const box = document.getElementById("favItems");
  box.innerHTML = "";

  if (!favorites.length) {
    box.innerHTML = "<p>‚≠ê –ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.</p>";
    return;
  }

  favorites.forEach((p, i) => {
    const productIndex = products.findIndex(item => item.name === p.name);
    const row = document.createElement("div");
    row.className = "cart-item";

    row.innerHTML = `
      <img src="${p.img}" alt="${p.name}" onclick="openProduct(${productIndex})" style="cursor:pointer">
      <div style="flex:1;cursor:pointer" onclick="openProduct(${productIndex})">
        <div style="font-weight:600">${p.name}</div>
        <div>${fmt(p.price)} MDL</div>
      </div>
      <button class="btn btn-danger" onclick="removeFavorite(${i})">‚úñ</button>
    `;

    box.appendChild(row);
  });
}


function removeFavorite(i) {
  favorites.splice(i, 1);
  document.getElementById("favCount").textContent = favorites.length;
  renderFavorites();
  render();
  saveState();
}


// --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è
function renderPagination(total) {
  const box = $("pagination");
  box.innerHTML = "";
  for (let i = 1; i <= total; i++) {
    const b = document.createElement("button");
    b.className = "page-btn" + (i === currentPage ? " active" : "");
    b.textContent = i;
    b.onclick = () => { currentPage = i; render(); };
    box.appendChild(b);
  }
}

// --- –ü–æ–∏—Å–∫
function filterProducts() {
  query = $("searchInput").value.trim().toLowerCase();
  currentPage = 1;
  render();
}

// --- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
(function initSort() {
  const dd = $("sortDropdown");
  const btn = $("sortBtn");
  const menu = $("sortMenu");
  btn.addEventListener("click", e => {
    e.stopPropagation();
    dd.classList.toggle("open");
  });
  menu.querySelectorAll("button").forEach(b => {
    b.addEventListener("click", () => {
      sortMode = b.dataset.sort;
      btn.textContent =
        sortMode === "priceAsc" ? "–¶–µ–Ω–∞ ‚Üë" :
        sortMode === "priceDesc" ? "–¶–µ–Ω–∞ ‚Üì" :
        sortMode === "name" ? "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é" :
        "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚ñæ";
      dd.classList.remove("open");
      render();
    });
  });
  document.addEventListener("click", () => dd.classList.remove("open"));
})();

// --- –ö–æ—Ä–∑–∏–Ω–∞
function toggleCart() {
  const o = $("cartOverlay");
  o.style.display = o.style.display === "flex" ? "none" : "flex";
  renderCart();
}

function addToCart(i) {
  const p = products[i];
  cart.push({ ...p });
  $("cartCount").textContent = cart.length;
  renderCart();

  const cartBtn = document.getElementById("cartBtn");
  cartBtn.classList.add("pulse");
  setTimeout(() => cartBtn.classList.remove("pulse"), 400);
  saveState();
}

function removeFromCart(i) {
  cart.splice(i, 1);
  $("cartCount").textContent = cart.length;
  renderCart();
  saveState();
}

function clearCart() {
  cart = [];
  $("cartCount").textContent = 0;
  renderCart();
  saveState(); 
}

function renderCart() {
  const box = $("cartItems");
  box.innerHTML = "";
  let total = 0;
  cart.forEach((p, i) => {
    total += p.price;
    const row = document.createElement("div");
    row.className = "cart-item";
    row.innerHTML = `
      <img src="${p.img}" alt="">
      <div style="flex:1">
        <div style="font-weight:600">${p.displayName || p.name}</div>
        <div>${fmt(p.price)} MDL</div>
      </div>
      <button class="btn btn-danger" onclick="removeFromCart(${i})">‚úñ</button>
    `;
    box.appendChild(row);
  });
  $("totalPrice").textContent = fmt(total);
}

// --- –ú–æ–¥–∞–ª–∫–∞ —Ç–æ–≤–∞—Ä–∞
let modalState = { index: null, colorIdx: 0, memIdx: 0 };

function openProduct(i) {
  modalState = { index: i, colorIdx: 0, memIdx: 0 };
  const p = products[i];

  $("modalTitle").textContent = p.name;
  $("modalSpecs").innerHTML = p.specs.map(s => `<li>‚Ä¢ ${s}</li>`).join("");
  $("modalPrice").textContent = fmt(p.price) + " MDL";
  $("modalImg").src = p.img;

  const colorBox = $("colorOptions");
  colorBox.innerHTML = "";
  if (p.colors?.length) {
    p.colors.forEach((c, ci) => {
      const chip = document.createElement("div");
      chip.className = "color-chip" + (ci === 0 ? " active" : "");
      chip.style.backgroundColor = c.color;
      chip.title = c.name;
      chip.onclick = () => {
        colorBox.querySelectorAll(".color-chip").forEach(x => x.classList.remove("active"));
        chip.classList.add("active");
        modalState.colorIdx = ci;
        $("modalImg").src = c.img || p.img;
      };
      colorBox.appendChild(chip);
    });
  }

  const memBox = $("memoryOptions");
  memBox.innerHTML = "";
  const memory = p.memory?.length ? p.memory : [{ size: "–ë–∞–∑–æ–≤—ã–π", price: p.price }];
  memory.forEach((m, mi) => {
    const b = document.createElement("button");
    b.className = "mem-btn" + (mi === 0 ? " active" : "");
    b.textContent = m.size;
    b.onclick = () => {
      memBox.querySelectorAll(".mem-btn").forEach(x => x.classList.remove("active"));
      b.classList.add("active");
      modalState.memIdx = mi;
      $("modalPrice").textContent = fmt(memory[mi].price) + " MDL";
    };
    memBox.appendChild(b);
  });

  $("modalAddToCart").onclick = () => {
    const c = p.colors?.[modalState.colorIdx];
    const m = memory[modalState.memIdx];
    const price = m.price ?? p.price;
    const name = `${p.name}${c ? ` (${c.name}` : ""}${m ? `${c ? ", " : " ("}${m.size}` : ""}${(c || m) ? ")" : ""}`;
    cart.push({ ...p, price, displayName: name, img: c?.img || p.img });
    $("cartCount").textContent = cart.length;
    renderCart();
    closeModal();
    showToast("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", "success");
  };
const favBtn = document.getElementById("modalAddToFav");
const isFav = favorites.find(f => f.name === p.name);
if (isFav) {
  favBtn.classList.add("active");
  favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º";
} else {
  favBtn.classList.remove("active");
  favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
}

  $("productModal").style.display = "flex";
}


function toggleModalFavorite() {
  const i = modalState.index;
  const p = products[i];
  const favBtn = document.getElementById("modalAddToFav");
  const existing = favorites.find(f => f.name === p.name);

  if (!existing) {
    favorites.push(p);
    favBtn.classList.add("active");
    favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º";
    showToast("üíö –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", "success");
  } else {
    favorites = favorites.filter(f => f.name !== p.name);
    favBtn.classList.remove("active");
    favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
    showToast("üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "info");
  }

  document.getElementById("favCount").textContent = favorites.length;
  render();
}


function closeModal() { $("productModal").style.display = "none"; }

// --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function placeOrder() {
  if (!cart.length) return showToast("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", "info");
  $("orderOverlay").style.display = "flex";
}
function closeOrder() { $("orderOverlay").style.display = "none"; }
function overlayClick(e) { if (e.target.classList.contains("overlay")) e.target.style.display = "none"; }

// --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(message, type = "info") {
  const container = document.getElementById("toastContainer");
  const toast = document.createElement("div");
  toast.className = `toast ${type}`;
  toast.textContent = message;
  container.appendChild(toast);

  setTimeout(() => {
    toast.style.animation = "toastOut 0.4s ease forwards";
    setTimeout(() => toast.remove(), 400);
  }, 3000);
}

// === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
document.querySelectorAll(".cat-btn").forEach(btn => {
  btn.addEventListener("click", () => {
    document.querySelectorAll(".cat-btn").forEach(b => b.classList.remove("active"));
    btn.classList.add("active");
    activeCategory = btn.dataset.cat;
    currentPage = 1;
    render();
  });
});

// === –î–æ–º–æ–π ===
function goHome() {
  document.querySelectorAll('.overlay').forEach(el => el.style.display = 'none');
  query = "";
  sortMode = "default";
  activeCategory = "all"; 
  $("searchInput").value = "";
  currentPage = 1;
  render();
  window.scrollTo({ top: 0, behavior: "smooth" });
  showToast("üè† –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", "info");
}

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ) ===
function showPage(page) {
  const main = document.querySelector("main");
  const catalog = document.querySelector(".catalog");
  const headerBottom = document.querySelector(".header-bottom");
  const searchWrap = document.querySelector(".search-wrap");

  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.querySelectorAll(".page").forEach(p => p.style.display = "none");

  if (page === "shop") {
    if (main) main.style.display = "block";
    if (catalog) catalog.style.display = "flex";
    if (headerBottom) headerBottom.style.display = "flex";
    if (searchWrap) searchWrap.style.display = "flex";
  } else {
    if (main) main.style.display = "none";
    if (catalog) catalog.style.display = "none";
    if (headerBottom) headerBottom.style.display = "none";
    if (searchWrap) searchWrap.style.display = "none";
  }

  // üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const currentPage = document.getElementById(`page-${page}`);
  if (currentPage) currentPage.style.display = "block";

  // üîπ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
  if (page === "orders") renderOrders();
  if (page === "profile") renderProfile();

  window.scrollTo({ top: 0, behavior: "smooth" });
}

// === –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é ===
function toggleMenu() {
  const nav = document.querySelector('.top-nav');
  nav.classList.toggle('active');
}

document.addEventListener('DOMContentLoaded', () => {
  // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const savedCart = localStorage.getItem("cart");
  const savedFav = localStorage.getItem("favorites");

  if (savedCart) cart = JSON.parse(savedCart);
  if (savedFav) favorites = JSON.parse(savedFav);

  $("cartCount").textContent = cart.length;
  $("favCount").textContent = favorites.length;
  render();
  showPage("shop");

  const nav = document.querySelector('.top-nav');
  const burger = document.querySelector('.burger');

  document.querySelectorAll('.top-nav .nav-btn').forEach(btn => {
    btn.addEventListener('click', () => nav.classList.remove('active'));
  });

  document.addEventListener('click', (e) => {
    if (!nav.contains(e.target) && !burger.contains(e.target)) {
      nav.classList.remove('active');
    }
  });

  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –∫–æ—Ä–∑–∏–Ω—É
  const headerBottom = document.querySelector(".header-bottom");
  if (headerBottom) {
    headerBottom.style.justifyContent = "center";
    headerBottom.style.gap = "12px";
  }
});

// === üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ ===
let orderHistory = JSON.parse(localStorage.getItem("orderHistory") || "[]");

function saveOrderHistory() {
  localStorage.setItem("orderHistory", JSON.stringify(orderHistory));
}

function renderOrders() {
  const box = document.getElementById("ordersList");
  box.innerHTML = "";

  if (!orderHistory.length) {
    box.innerHTML = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üõç</p>";
    return;
  }

  orderHistory
    .slice()
    .reverse()
    .forEach((order, i) => {
      const div = document.createElement("div");
      div.className = "order-card";
      const items = order.items.map(x => `‚Ä¢ ${x}`).join("<br>");
      div.innerHTML = `
        <h3>–ó–∞–∫–∞–∑ ‚Ññ${i + 1}</h3>
        <p><b>–î–∞—Ç–∞:</b> ${order.date}</p>
        <p><b>–ò–º—è:</b> ${order.name}</p>
        <p><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}</p>
        <p><b>–¢–æ–≤–∞—Ä—ã:</b><br>${items}</p>
        <p><b>–°—É–º–º–∞:</b> ${order.total} MDL</p>
      `;
      box.appendChild(div);
    });
}

// === üåó –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã (–Ω–æ—á–Ω–∞—è ‚Üî –¥–Ω–µ–≤–Ω–∞—è) ===
document.addEventListener("DOMContentLoaded", () => {
  const themeBtn = document.getElementById("themeToggle");
  const root = document.documentElement;
  const savedTheme = localStorage.getItem("theme");

  if (savedTheme === "light") {
    root.classList.add("light-theme");
    themeBtn.textContent = "üåû";
  } else {
    themeBtn.textContent = "üåô";
  }

  themeBtn.addEventListener("click", () => {
    root.classList.toggle("light-theme");
    const isLight = root.classList.contains("light-theme");
    themeBtn.textContent = isLight ? "üåû" : "üåô";
    localStorage.setItem("theme", isLight ? "light" : "dark");
  });
});


// === üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram ===
async function sendOrder() {
  const name = $("orderName").value.trim();
  const phone = $("orderPhone").value.trim();
  const comment = $("orderComment").value.trim();

  if (!currentUser) {
    $("cartOverlay").style.display = "none";
    $("orderOverlay").style.display = "none";
    showToast("üîí –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!", "error");
    showPage("account");
    return;
  }

  if (!name || !phone) {
    showToast("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!", "error");
    return;
  }

  if (!cart.length) {
    showToast("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", "info");
    return;
  }

  const itemsText = cart
    .map((p, i) => `${i + 1}. ${p.displayName || p.name} ‚Äî ${fmt(p.price)} MDL`)
    .join("\n");

  const text = `
üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ PrimeDevices.pmr</b>\n
üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || "‚Äî"}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${itemsText}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –ò—Ç–æ–≥–æ: ${$("totalPrice").textContent} MDL
`;

  try {
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
    const res = await fetch(telegramUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text,
        parse_mode: "HTML"
      })
    });

    const data = await res.json();

    if (res.ok && data.ok) {
      const orderData = {
        date: new Date().toLocaleString(),
        name,
        phone,
        comment,
        items: cart.map(p => p.displayName || p.name),
        total: $("totalPrice").textContent
      };
      orderHistory.push(orderData);
      saveOrderHistory();

      showToast("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", "success");
      $("orderOverlay").style.display = "none";
      cart = [];
      $("cartCount").textContent = 0;
      renderCart();
      saveState();
    } else {
      console.error("–û—à–∏–±–∫–∞ Telegram:", data);
      showToast("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞!", "error");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
    
  }
}




// üì∏ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
function previewReviewPhoto(e) {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = ev => {
    tempReviewPhoto = ev.target.result;
    $("reviewPreview").innerHTML = `
      <img src="${tempReviewPhoto}" alt="–§–æ—Ç–æ –æ—Ç–∑—ã–≤–∞" 
           style="max-width:150px; border-radius:10px; margin-top:8px; border:2px solid var(--accent);">
    `;
  };
  reader.readAsDataURL(file);
}

// üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
function addReview() {
  const name = $("reviewName").value.trim();
  const text = $("reviewText").value.trim();

  if (!name || !text) {
    showToast("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–∫—Å—Ç!", "error");
    return;
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–¥
  if (!currentUser) {
    showToast("üîí –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!", "error");
    showPage("account");
    return;
  }

  const newReview = {
    name,
    text,
    email: currentUser.email,
    date: new Date().toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "long",
      year: "numeric"
    }),
    photo: tempReviewPhoto || null
  };

  reviews.push(newReview);
  localStorage.setItem("reviews", JSON.stringify(reviews));

  $("reviewName").value = "";
  $("reviewText").value = "";
  $("reviewPhoto").value = "";
  $("reviewPreview").innerHTML = "";
  tempReviewPhoto = null;

  showToast("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", "success");
  renderReviews();
}


// üìã –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
function renderReviews() {
  const box = $("reviewsList");
  box.innerHTML = "";

  if (!reviews.length) {
    box.innerHTML = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º! üåü</p>";
    return;
  }

  reviews.forEach((r, i) => {
    const card = document.createElement("div");
    card.className = "review-card";

    const canDelete = currentUser && currentUser.email === r.email;
    const deleteBtn = canDelete
      ? `<button class="btn btn-danger" style="margin-top:10px;" onclick="deleteReview(${i})">üóë –£–¥–∞–ª–∏—Ç—å</button>`
      : "";

    card.innerHTML = `
      <p><b>${r.name}</b> <span style="opacity:0.7;">(${r.date})</span></p>
      <p>${r.text}</p>
      ${r.photo ? `<img src="${r.photo}" alt="–§–æ—Ç–æ –æ—Ç–∑—ã–≤–∞"
        style="max-width:150px; border-radius:10px; margin-top:8px; border:2px solid var(--accent);">` : ""}
      ${deleteBtn}
    `;
    box.prepend(card); // –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã —Å–≤–µ–∂–∏–µ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
  });
}

function deleteReview(index) {
  if (!currentUser) return showToast("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!", "error");

  const review = reviews[index];
  if (review.email !== currentUser.email) {
    showToast("üö´ –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–∑—ã–≤!", "error");
    return;
  }

  if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?")) return;

  reviews.splice(index, 1);
  localStorage.setItem("reviews", JSON.stringify(reviews));
  showToast("üóë –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω!", "success");
  renderReviews();
}

// ‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", renderReviews);


// === üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
function toggleAuth(mode) {
  $("loginBox").style.display = mode === "login" ? "block" : "none";
  $("registerBox").style.display = mode === "register" ? "block" : "none";
}

function registerUser() {
  users = JSON.parse(localStorage.getItem("users") || "[]");

  const name = $("regName").value.trim();
  const email = $("regEmail").value.trim().toLowerCase();
  const pass = $("regPass").value.trim();

  if (!name || !email || !pass) return showToast("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", "error");

  const exists = users.some(u => u.email === email);
  if (exists) return showToast("‚ùå –¢–∞–∫–æ–π email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "error");

  const newUser = { name, email, pass };
  users.push(newUser);
  localStorage.setItem("users", JSON.stringify(users));
  showToast("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", "success");
  toggleAuth("login");
}

function loginUser() {
  const email = $("loginEmail").value.trim().toLowerCase();
  const pass = $("loginPass").value.trim();
  const user = users.find(u => u.email === email && u.pass === pass);

  if (!user) return showToast("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!", "error");

  currentUser = user;
  localStorage.setItem("currentUser", JSON.stringify(user));
  renderAccount();
  showToast(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!`, "success");
}

function logoutUser() {
  currentUser = null;
  localStorage.removeItem("currentUser");
  renderAccount();
  showToast("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", "info");
}

// === üë§ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ñ–∏–ª—è ===
function renderAccount() {
  if (currentUser) {
    $("loginBox").style.display = "none";
    $("registerBox").style.display = "none";
    $("userPanel").style.display = "block";
    $("userName").textContent = currentUser.name;
    loadAvatar();
  } else {
    $("loginBox").style.display = "block";
    $("registerBox").style.display = "none";
    $("userPanel").style.display = "none";
  }
}

// === üßç –ê–≤–∞—Ç–∞—Ä ===
function loadAvatar() {
  if (!currentUser) return;
  const avatarKey = `avatar_${currentUser.email}`;
  const saved = localStorage.getItem(avatarKey);
  $("userAvatar").src = saved || `https://dummyimage.com/200x200/1c79ff/ffffff&text=${currentUser.name.charAt(0).toUpperCase()}`;
}

function changeAvatar(e) {
  const file = e.target.files[0];
  if (!file || !currentUser) return;
  const reader = new FileReader();
  reader.onload = ev => {
    const avatarKey = `avatar_${currentUser.email}`;
    localStorage.setItem(avatarKey, ev.target.result);
    $("userAvatar").src = ev.target.result;
    showToast("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
  };
  reader.readAsDataURL(file);
}

// === ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ ===
function toggleEdit() {
  tempAvatar = null;
  const box = $("editProfileBox");
  box.style.display = box.style.display === "none" ? "block" : "none";
}

function cancelEdit() {
  $("editProfileBox").style.display = "none";
}
function saveProfile() {
  const newName = $("editName").value.trim();
  if (!newName) return showToast("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è!", "error");

  let users = JSON.parse(localStorage.getItem("users") || "[]");
  users = users.map(u => (u.email === currentUser.email ? { ...u, name: newName } : u));
  localStorage.setItem("users", JSON.stringify(users));

  currentUser.name = newName;
  localStorage.setItem("currentUser", JSON.stringify(currentUser));
  $("userName").textContent = newName;
  $("editProfileBox").style.display = "none";
  showToast("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
}

// === üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
function deleteAccount() {
  if (!currentUser) return showToast("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏!", "error");
  if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ${currentUser.email}?`)) return;

  let users = JSON.parse(localStorage.getItem("users") || "[]");
  users = users.filter(u => u.email !== currentUser.email);
  localStorage.setItem("users", JSON.stringify(users));
  localStorage.removeItem(`avatar_${currentUser.email}`);
  localStorage.removeItem("currentUser");
  currentUser = null;

  showToast("üóë –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω!");
  renderAccount();
  toggleAuth("register");
}


// === üßç –ê–í–ê–¢–ê–† + –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===

function loadAvatar() {
  const avatar = $("userAvatar");
  if (!currentUser || !avatar) return;

  const avatarKey = `avatar_${currentUser.email}`;
  const saved = localStorage.getItem(avatarKey);

  if (saved) {
    avatar.src = saved;
  } else if (currentUser.name) {
    const letter = currentUser.name.charAt(0).toUpperCase();
    avatar.src = `https://dummyimage.com/200x200/1c79ff/ffffff&text=${letter}`;
  } else {
    avatar.src = `https://dummyimage.com/200x200/1c79ff/ffffff&text=?`;
  }
}


let tempAvatar = null; // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ

function changeAvatar(e) {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = ev => {
    tempAvatar = ev.target.result; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
    $("userAvatar").src = tempAvatar; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showToast("üì∑ –§–æ—Ç–æ –≤—ã–±—Ä–∞–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "info");
  };
  reader.readAsDataURL(file);
}




// –ø–æ–∫–∞–∑–∞—Ç—å / —Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function toggleEdit() {
  const box = $("editProfileBox");
  box.style.display = box.style.display === "none" ? "block" : "none";
}

// –æ—Ç–º–µ–Ω–∞
function cancelEdit() {
  $("editProfileBox").style.display = "none";
}

function saveProfile() {
  const newName = $("editName").value.trim();

  if (!newName && !tempAvatar) {
    showToast("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", "error");
    return;
  }

  let users = JSON.parse(localStorage.getItem("users") || "[]");
  users = users.map(u => {
    if (u.email === currentUser.email) {
      return { ...u, name: newName || u.name };
    }
    return u;
  });
  localStorage.setItem("users", JSON.stringify(users));

  if (newName) {
    currentUser.name = newName;
    $("userName").textContent = newName;
  }

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
  if (tempAvatar) {
    const avatarKey = `avatar_${currentUser.email}`;
    localStorage.setItem(avatarKey, tempAvatar);
    $("userAvatar").src = tempAvatar;
    tempAvatar = null; // –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
  }

  localStorage.setItem("currentUser", JSON.stringify(currentUser));
  $("editProfileBox").style.display = "none";
  showToast("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
}




// –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", loadAvatar);

// === üîê –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞) ===
function makeAdmin(targetEmail) {
  if (!isMainAdmin()) {
    showToast("üö´ –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤!", "error");
    return;
  }

  let users = JSON.parse(localStorage.getItem("users") || "[]");
  const user = users.find(u => u.email === targetEmail);

  if (!user) {
    showToast("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω!", "error");
    return;
  }

  user.role = "admin";
  localStorage.setItem("users", JSON.stringify(users));
  showToast(`‚úÖ ${user.name} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!`);
}
